#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Apr 30, 2022 08:16:26 PM PDT  platform: Windows NT
#    May 01, 2022 03:10:22 PM PDT  platform: Linux
import datetime
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import tkhtmlview
import tksheet

import AddCustomerPaymentForm
from database.database import Database
from database.payment import Payment

customers = []
currentCustomer = None

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = AddCustomerPaymentForm.AddCustomerPaymentForm(_top1)
    init(_w1)
    root.mainloop()

def init(window):
    initialise_custom_widget()
    db = Database()

    global customers
    customers = db.searchCustomersWithVehicles()
    customerNames = []
    for customer in customers:
        customerNames.append(customer.customer_last_name + ", " + customer.customer_first_name)

    window.paidDateValue.set(datetime.date.today().strftime("%m/%d/%y"))
    window.CustomerComboBox["values"] = customerNames
    window.CustomerComboBox.bind('<<ComboboxSelected>>', selectCustomer)
    window.PaymentDateEntry.bind("<KeyRelease>", enterText)  # keyup
    window.PaidDateEntry.bind("<KeyRelease>", enterText)  # keyup
    window.DueEntry.bind("<KeyRelease>", enterText)  # keyup
    window.BankAmountEntry.bind("<KeyRelease>", enterText)  # keyup
    window.AmountEntry.bind("<KeyRelease>", enterText)  # keyup

    db.close()
    updateView()

def selectCustomer(event):
    print("selected")
    global currentCustomer
    currentCustomer = customers[_w1.CustomerComboBox.current()]
    showPaymentHistory()
    updateView()

def showPaymentHistory():
    db = Database()

    history = db.getPaymentHistoryReport(currentCustomer.customer_id)

    _w1.Custom4.set_html(history.getHtmlHeader())

    count = _w1.Custom1.get_total_rows()
    for i in range(count - 1, -1, -1):
        _w1.Custom1.delete_row(i)

    for payment in history.payments:
        print(payment)

        _w1.Custom1.insert_row([payment.payment_date.strftime("%m/%d/%y"),
                                "${:.2f}".format(payment.payment_amount_due),
                                payment.payment_paid_date.strftime("%m/%d/%y"),
                                "${:.2f}".format(payment.payment_amount),
                                payment.payment_bank_account],
                               redraw=True)

    _w1.Custom1.set_all_column_widths()

    lastPayment = history.payments[-1]
    _w1.bankAccountValue.set(lastPayment.payment_bank_account)

    db.close()

def enterText(event):
    updateView()

def updateView():

    if len(_w1.customerValue.get()) and len(_w1.bankAccountValue.get()) and len(_w1.paidDateValue.get()) and len(_w1.amuntPaidValue.get()) \
            and len(_w1.amountDueValue.get()) and len(_w1.paymentDueValue.get()):
        _w1.AddMore["state"] = "active"
    else:
        _w1.AddMore["state"] = "disabled"

    pass

def initialise_custom_widget():
    """
    The tksheet.Sheet class has a lot of properties and event handlers, this
    initialisation function only uses a small subset of them to make a data
    grid with fairly basic functionality and formatting. There is minimal (or
    no) documentation with tksheet, so to extend the functionality illustrated
    here, look at the test_tksheet.py on GitHub for other options.
    """

    # global _w2
    head = ['Payment Date', 'Amount Due', 'Date Paid', 'Amount Paid', 'Bank Account']
    # and apply them to the data grid.
    _w1.Custom1.headers(head, redraw=True)

    # Enable a subset of the built-in class event handlers. These don't need to
    # be defined here, they are included in the class.

    # This code has an error
    _w1.Custom1.enable_bindings(
        "single_select",
        # "drag_select",
        "column_select",
        "row_select",
        "column_width_resize",
        "row_height_resize",
        "copy",
        "cut",
        # "paste",
        # "delete",
        # "undo",
        # "edit_cell"
    )

def Submit(*args):
    print('AddCustomerPaymentForm_support.Submit')
    for arg in args:
        print('another arg:', arg)
    sys.stdout.flush()

Custom = tksheet.Sheet  # To be updated by user with name of custom widget.
CustomHtmlLabel = tkhtmlview.HTMLLabel

def AddPayment(*args):
    print('AddCustomerPaymentForm_support.AddPayment')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

    db = Database()

    payment = Payment(currentCustomer.customer_id, 0, 0,
                      datetime.datetime.strptime(_w1.paymentDueValue.get(), "%m/%d/%y"),
                      _w1.amountDueValue.get(),
                      datetime.datetime.strptime(_w1.paidDateValue.get(), "%m/%d/%y"),
                      _w1.amuntPaidValue.get(),
                      _w1.bankAccountValue.get())

    db.makePayment(payment)

    db.close()

    showPaymentHistory()

if __name__ == '__main__':
    AddCustomerPaymentForm.start_up()





