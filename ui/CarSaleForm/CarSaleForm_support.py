#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Apr 25, 2022 08:05:00 AM PDT  platform: Windows NT
#    Apr 27, 2022 10:40:15 AM PDT  platform: Linux
#    Apr 27, 2022 06:46:54 PM PDT  platform: Linux
#    Apr 27, 2022 07:39:39 PM PDT  platform: Linux
import datetime
import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import tkhtmlview

import CarSaleForm
import ui
from database.database import Database
from database.sale import VehicleSale
from ui import CustomerADDorSelectForm
from ui.AddCustomerEmployerForm import AddCustomerEmployerForm
from ui.AddCustomerEmployerForm import AddCustomerEmployerForm_support
from ui.CustomerADDorSelectForm import CustomerADDorSelectForm_support
from ui.VehicleSearch import vehicle_search_support
from ui.generic_report import generic_report_support

employment_history = []
customerData = None
vehicleData = None
salesPeople = []
currentSalesPerson = None

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    # _w1 = CarSaleForm.Toplevel1(_top1)
    _w1 = CarSaleForm.VehicleSaleForm(_top1)
    init()
    root.mainloop()

def init():
    db = Database()

    results = db.searchSalesPeople()
    value_list = []
    for sp in results:
        value_list.append(sp.salesperson_id)

    # set date
    _w1.dateValue.set(datetime.date.today())
    _w1.totalDueValue.set("8000")
    _w1.downPaymentValue.set("5000")
    _w1.commissionValue.set("1000")
    _w1.financedAmount.set("3000")

    global salesPeople
    salesPeople = db.searchSalesPeople()

    salesNames = []
    for name in salesPeople:
        salesNames.append(name.salesperson_name)

    _w1.SalesPersonComboBox["values"] = salesNames
    _w1.SalesPersonComboBox.bind('<<ComboboxSelected>>', selectSalesPerson)
    db.close()

def selectSalesPerson(event):
    print("selected")
    global currentSalesPerson
    currentSalesPerson = salesPeople[_w1.SalesPersonComboBox.current()]
    updateView()

def updateView():
    pass

def AddWorkHistory(*args):
    print('CarSaleForm_support.AddWorkHistory')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    AddCustomerEmployerForm_support.addEmployer(customerData, addEmployer)

def addEmployer(employment):
    employment_history.append(employment)
    print (employment)
    # display

    html = """<pre style="font-size: 10px">"""
    html += "{:14} {:24} {:16} {:14}\n".format("Title", "Employer", "Supervisor", "Phone")
    for employment in employment_history:
        html += employment.getHtml()
    _w1.Custom1.set_html(html + "</pre>")


def SalespersonNames(*args):
    print('CarSaleForm_support.SalespersonNames')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def SelectCustomer(*args):
    print('CarSaleForm_support.SelectCustomer')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    CustomerADDorSelectForm_support.selectCustomer(customerSelected, customerData)

def customerSelected(customer):
    print("customer selected:", customer)
    _w1.CustomerDetailsText.insert("1.0", customer.getText())
    global customerData
    customerData = customer
    pass

def SelectVehicle(*args):
    print('CarSaleForm_support.SelectVehicle')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    vehicle_search_support.selectVehicle(vehicleSelected)

def vehicleSelected(vehicle):
    global vehicleData
    vehicleData = vehicle
    print(vehicle)
    _w1.CarDetailsText.delete("1.0", END)
    _w1.CarDetailsText.insert("1.0", vehicle.getText())

def Submit(*args):
    print('CarSaleForm_support.Submit')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    db = Database()

    sale = VehicleSale(0, _w1.dateValue.get(),
                       _w1.totalDueValue.get(),
                       _w1.downPaymentValue.get(),
                       _w1.financedAmount.get(),
                       currentSalesPerson.salesperson_id,
                       _w1.commissionValue.get(),
                       vehicleData.vehicle_id,
                       customerData.customer_id)
    sale.setCustomer(customerData)
    sale.setVehicle(vehicleData)
    sale.setCustomEmployment(employment_history)

    sale_id = db.sellVehicle(sale)

    generic_report_support.displayReport(db.getSaleReport(sale_id).getHtml(), "Vehicle Sale Report")

    db.close()

Custom = tkhtmlview.HTMLScrolledText  # To be updated by user with name of custom widget.

if __name__ == '__main__':
    CarSaleForm.start_up()





