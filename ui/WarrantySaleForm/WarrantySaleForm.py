#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Apr 30, 2022 10:10:00 AM PDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import WarrantySaleForm_support

class WarrantySaleForm:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("632x563+996+737")
        top.minsize(120, 1)
        top.maxsize(1924, 1061)
        top.resizable(0,  0)
        top.title("Warranty Sale Form")
        top.configure(highlightcolor="black")

        self.top = top
        self.salesPersonValue = tk.StringVar()
        self.vehicleValue = tk.StringVar()
        self.itemValue = tk.StringVar()

        self.WarrantySales = tk.Label(self.top)
        self.WarrantySales.place(x=10, y=10, height=27, width=341)
        self.WarrantySales.configure(activebackground="#f9f9f9")
        self.WarrantySales.configure(anchor='w')
        self.WarrantySales.configure(compound='left')
        self.WarrantySales.configure(text='''Warranty Sales: Select a salesperson, customer and vehicle''')

        self.SalesPerson = tk.Label(self.top)
        self.SalesPerson.place(x=10, y=50, height=26, width=109)
        self.SalesPerson.configure(activebackground="#f9f9f9")
        self.SalesPerson.configure(anchor='w')
        self.SalesPerson.configure(compound='left')
        self.SalesPerson.configure(text='''Salesperson''')

        self.Customer = tk.Label(self.top)
        self.Customer.place(x=300, y=50, height=26, width=109)
        self.Customer.configure(activebackground="#f9f9f9")
        self.Customer.configure(anchor='w')
        self.Customer.configure(compound='left')
        self.Customer.configure(text='''Customer''')

        self.Vehicle = tk.Label(self.top)
        self.Vehicle.place(x=10, y=90, height=26, width=109)
        self.Vehicle.configure(activebackground="#f9f9f9")
        self.Vehicle.configure(anchor='w')
        self.Vehicle.configure(compound='left')
        self.Vehicle.configure(text='''Vehicle''')

        self.Submit = tk.Button(self.top)
        self.Submit.place(x=440, y=100, height=24, width=137)
        self.Submit.configure(command=WarrantySaleForm_support.Submit)
        self.Submit.configure(compound='left')
        self.Submit.configure(pady="0")
        self.Submit.configure(text='''Submit''')

        self.WarrantySales_1 = tk.Label(self.top)
        self.WarrantySales_1.place(x=10, y=130, height=26, width=131)
        self.WarrantySales_1.configure(activebackground="#f9f9f9")
        self.WarrantySales_1.configure(anchor='w')
        self.WarrantySales_1.configure(compound='left')
        self.WarrantySales_1.configure(text='''Warranty Sales Form''')

        self.VIN = tk.Text(self.top)
        self.VIN.place(x=30, y=170, height=30, width=161)
        self.VIN.configure(background="white")
        self.VIN.configure(font="TkTextFont")
        self.VIN.configure(selectbackground="blue")
        self.VIN.configure(selectforeground="white")
        self.VIN.configure(wrap="word")

        self.Phone = tk.Text(self.top)
        self.Phone.place(x=410, y=170, height=30, width=162)
        self.Phone.configure(background="white")
        self.Phone.configure(font="TkTextFont")
        self.Phone.configure(selectbackground="blue")
        self.Phone.configure(selectforeground="white")
        self.Phone.configure(wrap="word")

        self.Warranty1 = tk.Label(self.top)
        self.Warranty1.place(x=10, y=220, height=26, width=131)
        self.Warranty1.configure(activebackground="#f9f9f9")
        self.Warranty1.configure(anchor='w')
        self.Warranty1.configure(compound='left')
        self.Warranty1.configure(text='''Warranty 1''')

        self.StartDate = tk.Label(self.top)
        self.StartDate.place(x=10, y=260, height=26, width=109)
        self.StartDate.configure(activebackground="#f9f9f9")
        self.StartDate.configure(anchor='w')
        self.StartDate.configure(compound='left')
        self.StartDate.configure(text='''Start Date''')

        self.Length = tk.Label(self.top)
        self.Length.place(x=10, y=300, height=26, width=109)
        self.Length.configure(activebackground="#f9f9f9")
        self.Length.configure(anchor='w')
        self.Length.configure(compound='left')
        self.Length.configure(text='''Length''')

        self.Cost = tk.Label(self.top)
        self.Cost.place(x=10, y=340, height=26, width=108)
        self.Cost.configure(activebackground="#f9f9f9")
        self.Cost.configure(anchor='w')
        self.Cost.configure(compound='left')
        self.Cost.configure(text='''Cost''')

        self.Deductible = tk.Label(self.top)
        self.Deductible.place(x=10, y=380, height=26, width=109)
        self.Deductible.configure(activebackground="#f9f9f9")
        self.Deductible.configure(anchor='w')
        self.Deductible.configure(compound='left')
        self.Deductible.configure(text='''Deductible''')

        self.One = tk.Label(self.top)
        self.One.place(x=350, y=260, height=26, width=57)
        self.One.configure(activebackground="#f9f9f9")
        self.One.configure(anchor='w')
        self.One.configure(compound='left')
        self.One.configure(text='''One''')

        self.StartDateEntry = tk.Entry(self.top)
        self.StartDateEntry.place(x=130, y=260, height=20, width=144)
        self.StartDateEntry.configure(background="white")
        self.StartDateEntry.configure(font="TkFixedFont")
        self.StartDateEntry.configure(selectbackground="blue")
        self.StartDateEntry.configure(selectforeground="white")

        self.LengthEntry = tk.Entry(self.top)
        self.LengthEntry.place(x=130, y=300, height=20, width=144)
        self.LengthEntry.configure(background="white")
        self.LengthEntry.configure(font="TkFixedFont")
        self.LengthEntry.configure(selectbackground="blue")
        self.LengthEntry.configure(selectforeground="white")

        self.CostEntry = tk.Entry(self.top)
        self.CostEntry.place(x=130, y=340, height=20, width=144)
        self.CostEntry.configure(background="white")
        self.CostEntry.configure(font="TkFixedFont")
        self.CostEntry.configure(selectbackground="blue")
        self.CostEntry.configure(selectforeground="white")

        self.DeductibleEntry = tk.Entry(self.top)
        self.DeductibleEntry.place(x=130, y=380, height=20, width=144)
        self.DeductibleEntry.configure(background="white")
        self.DeductibleEntry.configure(font="TkFixedFont")
        self.DeductibleEntry.configure(selectbackground="blue")
        self.DeductibleEntry.configure(selectforeground="white")

        self.ItemsCovered = tk.Label(self.top)
        self.ItemsCovered.place(x=330, y=220, height=26, width=131)
        self.ItemsCovered.configure(activebackground="#f9f9f9")
        self.ItemsCovered.configure(anchor='w')
        self.ItemsCovered.configure(compound='left')
        self.ItemsCovered.configure(text='''Items Covered''')

        self.AddItem = tk.Button(self.top)
        self.AddItem.place(x=360, y=300, height=24, width=117)
        self.AddItem.configure(command=WarrantySaleForm_support.AddItem)
        self.AddItem.configure(compound='left')
        self.AddItem.configure(pady="0")
        self.AddItem.configure(text='''Add Item''')

        self.AddWarranty = tk.Button(self.top)
        self.AddWarranty.place(x=20, y=420, height=24, width=127)
        self.AddWarranty.configure(command=WarrantySaleForm_support.AddWarranty)
        self.AddWarranty.configure(compound='left')
        self.AddWarranty.configure(pady="0")
        self.AddWarranty.configure(text='''Add Warranty''')

        self.SubmitBottom = tk.Button(self.top)
        self.SubmitBottom.place(x=480, y=530, height=24, width=147)
        self.SubmitBottom.configure(command=WarrantySaleForm_support.SubmitBottom)
        self.SubmitBottom.configure(compound='left')
        self.SubmitBottom.configure(pady="0")
        self.SubmitBottom.configure(text='''Submit''')

        self.SalesPersonTCombobox = ttk.Combobox(self.top)
        self.SalesPersonTCombobox.place(x=120, y=50, height=24, width=150)
        self.SalesPersonTCombobox.configure(textvariable=self.salesPersonValue)
        self.SalesPersonTCombobox.configure(takefocus="")

        self.VehicleTCombobox = ttk.Combobox(self.top)
        self.VehicleTCombobox.place(x=120, y=90, height=24, width=150)
        self.VehicleTCombobox.configure(textvariable=self.vehicleValue)
        self.VehicleTCombobox.configure(takefocus="")

        self.CustomerTCombobox = ttk.Combobox(self.top)
        self.CustomerTCombobox.place(x=430, y=50, height=24, width=150)
        self.CustomerTCombobox.configure(textvariable=self.vehicleValue)
        self.CustomerTCombobox.configure(takefocus="")

        self.Items1TCombobox = ttk.Combobox(self.top)
        self.Items1TCombobox.place(x=430, y=260, height=24, width=150)
        self.Items1TCombobox.configure(textvariable=self.itemValue)
        self.Items1TCombobox.configure(takefocus="")

        self.AddItemScrolledlistbox = ScrolledListBox(self.top)
        self.AddItemScrolledlistbox.place(x=360, y=330, height=64, width=222)
        self.AddItemScrolledlistbox.configure(background="white")
        self.AddItemScrolledlistbox.configure(cursor="xterm")
        self.AddItemScrolledlistbox.configure(font="TkFixedFont")
        self.AddItemScrolledlistbox.configure(highlightcolor="#d9d9d9")
        self.AddItemScrolledlistbox.configure(selectbackground="blue")
        self.AddItemScrolledlistbox.configure(selectforeground="white")

        self.AddWarrantyCustom = WarrantySaleForm_support.Custom(self.top)
        self.AddWarrantyCustom.place(x=20, y=450, height=49, width=304)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    WarrantySaleForm_support.main()

if __name__ == '__main__':
    WarrantySaleForm_support.main()




